from sympy import sec
import numpy as np
import os
from BUDDHA.kNN_two_way_interaction_effects_reproducing_paper_experiments import run


def f_1(x):
    return np.math.pi ** (x[0] * x[1]) * np.math.sqrt(2 * x[2]) - (1/np.math.sin(x[3])) + np.math.log(x[2] + x[4]) - \
           (x[8] / x[9]) * np.math.sqrt(x[6] / x[7]) - x[1] * x[6]


def f_2(x):
    return np.pi ** (x[0] * x[1]) * np.sqrt(2 * np.abs(x[2])) - (np.arcsin(0.5 * x[3])) + np.log(np.abs(x[2] + x[4]) + 1) - \
           (x[8] / (1 + np.abs(x[9]))) * np.sqrt(x[6] / (1 + np.abs(x[7]))) - x[1] * x[6]


def f_3(x):
    return np.exp(np.abs(x[0] - x[1])) + np.abs(x[1] * x[2]) - ((x[2]) ** 2) ** np.absolute(x[3]) + \
           np.log(x[3] ** 2 + x[4] ** 2 + x[6] ** 2 + x[7] ** 2) + x[8] + 1 / (1 + x[9] ** 2)


def f_4(x):
    return np.exp(np.abs(x[0] - x[1])) + np.abs(x[1] * x[2]) - ((x[2]) ** 2) ** np.absolute(x[3]) + (x[0] * x[3]) ** 2 \
           + np.log(x[3] ** 2 + x[4] ** 2 + x[6] ** 2 + x[7] ** 2) + x[8] + 1 / (1 + x[9] ** 2)


def f_5(x):
    return 1 / (x[0] ** 2 + x[1] ** 2 + x[2] ** 2) + np.sqrt(np.exp(x[3] + x[4])) + np.abs(x[5] + x[6]) + x[7] * x[8] * x[9]


def f_6(x):
    return np.exp(np.abs(x[0] * x[1]) + 1) - np.exp(np.abs(x[2] + x[3]) + 1) + np.cos(x[4] + x[5] - x[7]) + np.sqrt(x[7] ** 2 + x[8] ** 2 + x[9] ** 2)


def f_7(x):
    return (np.arctan(x[0]) + np.arctan(x[1])) ** 2 + np.max(x[2] * x[3] + x[5], 0) - 1 / (1 + (x[3] * x[4] * x[5] * x[6] * x[7]) ** 2) + (np.abs(x[6]) / (1 + np.abs(x[8]))) ** 5 + np.sum([x[i] for i in range(10)])


def f_8(x):
    return x[0] * x[1] + 2 ** (x[2] + x[4] + x[5]) + 2 ** (x[2] + x[3] + x[4] + x[6]) + np.sin(x[6] * np.sin(x[7] + x[8])) + np.arccos(0.0 * x[9])


def f_9(x):
    return np.tanh(x[0] * x[1] + x[2] * x[3]) * np.sqrt(np.abs(x[4])) + np.exp(x[4] + x[5]) + np.log((x[5] * x[6] * x[7]) ** 2 + 1) + x[8] * x[9] + 1 / (1 + np.abs(x[9]))


def f_10(x):
    return np.sinh(x[0] + x[1]) + np.arccos(np.tanh(x[2] + x[4] + x[6])) + np.cos(x[3] + x[4]) + sec(x[6] * x[8])


if __name__ == "__main__":
    root_data_directory = "data/synthetic_data"
    size_of_synthetic_dataset = 30000
    input_dimension = 10

    num_trials = 10

    results = [[[], []] for _ in range(10)]

    # Generate synthetic data
    for i in range(10):
        print("\nExperiment ", i + 1)
        for trial in range(num_trials):
            print("Experiment ", i + 1, "Trial ", trial + 1, "\n")

            synthetic_data_X = []
            synthetic_data_y = []

            for _ in range(size_of_synthetic_dataset):
                inputs = list(np.random.uniform(0 if i < 2 else -1, 1, input_dimension))
                output = globals()["f_{}".format(i + 1)](inputs)

                synthetic_data_X.append(inputs)
                synthetic_data_y.append(output)

            # Output data and interaction effects
            data_directory_name = "synthetic_data_f_{}".format(i + 1)
            if not os.path.exists(root_data_directory + "/" + data_directory_name):
                os.makedirs(root_data_directory + "/" + data_directory_name)
            with open(root_data_directory + "/" + data_directory_name + "/X", "w") as file:
                file.write(str(synthetic_data_X))
            with open(root_data_directory + "/" + data_directory_name + "/y", "w") as file:
                file.write(str(synthetic_data_y))

            LR_score, kNN_score = run(i + 1)

            results[i][0].append(LR_score)
            results[i][1].append(kNN_score)

    # results = [[[0.5187165775401069, 0.6390374331550802, 0.4585561497326204, 0.5187165775401069, 0.6991978609625669, 0.5788770053475937, 0.5788770053475937, 0.4585561497326204, 0.4585561497326204, 0.5187165775401069], [0.3983957219251336, 0.5788770053475937, 0.5187165775401069, 0.5788770053475937, 0.5788770053475937, 0.5187165775401069, 0.6991978609625669, 0.4585561497326204, 0.5187165775401069, 0.5788770053475937]], [[0.7593582887700534, 0.7593582887700534, 0.7593582887700534, 0.7593582887700534, 0.7593582887700534, 0.7593582887700534, 0.7593582887700534, 0.7593582887700534, 0.7593582887700534, 0.7593582887700534], [0.8796791443850268, 0.8796791443850268, 0.9398395721925135, 0.8195187165775402, 0.8796791443850268, 0.8796791443850268, 0.9398395721925135, 0.8195187165775402, 0.8195187165775402, 0.8195187165775402]], [[0.375, 0.5833333333333334, 0.4444444444444445, 0.4444444444444445, 0.513888888888889, 0.375, 0.513888888888889, 0.513888888888889, 0.4444444444444445, 0.375], [0.513888888888889, 0.513888888888889, 0.513888888888889, 0.4444444444444445, 0.5833333333333334, 0.6527777777777778, 0.513888888888889, 0.5833333333333334, 0.513888888888889, 0.513888888888889]], [[0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.4857142857142857, 0.55, 0.55, 0.4857142857142857, 0.6142857142857142, 0.55, 0.55], [0.6785714285714286, 0.55, 0.6142857142857142, 0.55, 0.6785714285714286, 0.55, 0.4857142857142857, 0.4857142857142857, 0.55, 0.55]], [[0.7719594594594594, 0.543918918918919, 0.6199324324324325, 0.6199324324324325, 0.6199324324324325, 0.543918918918919, 0.6199324324324325, 0.6199324324324325, 0.543918918918919, 0.6959459459459458], [0.6199324324324325, 0.4679054054054054, 0.6959459459459458, 0.543918918918919, 0.7719594594594594, 0.543918918918919, 0.4679054054054054, 0.4679054054054054, 0.543918918918919, 0.6199324324324325]], [[0.6199324324324325, 0.6199324324324325, 0.6199324324324325, 0.543918918918919, 0.6959459459459458, 0.6959459459459458, 0.6199324324324325, 0.543918918918919, 0.543918918918919, 0.543918918918919], [0.6959459459459458, 0.6959459459459458, 0.6959459459459458, 0.6959459459459458, 0.6959459459459458, 0.847972972972973, 0.7719594594594594, 0.7719594594594594, 0.6959459459459458, 0.6959459459459458]], [[0.7246543778801843, 0.6209677419354838, 0.5172811059907835, 0.5172811059907835, 0.4654377880184331, 0.6209677419354838, 0.5172811059907835, 0.5691244239631337, 0.5691244239631337, 0.5172811059907835], [0.4654377880184331, 0.4654377880184331, 0.5172811059907835, 0.4654377880184331, 0.5691244239631337, 0.5172811059907835, 0.6209677419354838, 0.4654377880184331, 0.5172811059907835, 0.5172811059907835]], [[0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303], [0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303, 0.928030303030303]], [[0.5, 0.7000000000000002, 0.5499999999999999, 0.7000000000000002, 0.5, 0.5, 0.5499999999999999, 0.5, 0.6000000000000001, 0.7000000000000002], [0.6499999999999999, 0.5499999999999999, 0.6499999999999999, 0.6000000000000001, 0.5499999999999999, 0.6499999999999999, 0.5499999999999999, 0.5, 0.7000000000000002, 0.6499999999999999]], [[0.4230769230769231, 0.6153846153846154, 0.5192307692307693, 0.5192307692307693, 0.5192307692307693, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.5192307692307693, 0.5192307692307693], [0.5192307692307693, 0.5192307692307693, 0.5192307692307693, 0.6153846153846154, 0.5192307692307693, 0.5192307692307693, 0.5192307692307693, 0.5192307692307693, 0.5192307692307693, 0.5192307692307693]]]
    # trials_averaged = [[0.5427807486631017, 0.5427807486631016], [0.7593582887700535, 0.8676470588235295], [0.45833333333333337, 0.5347222222222223], [0.5242857142857142, 0.5692857142857143], [0.6199324324324325, 0.5743243243243243], [0.6047297297297298, 0.7263513513513512], [0.5639400921658987, 0.5120967741935484], [0.928030303030303, 0.928030303030303], [0.58, 0.6049999999999999], [0.4903846153846154, 0.5288461538461539]]
    # trials_averaged = [[round(trials_averaged[i][0], 3), round(trials_averaged[i][1], 3)] for i in range(10)]

    # results = [[sorted(t[0])[1:-1], sorted(t[1])[1:-1]] for t in results]
    trials_averaged = [[round(np.mean(t[0]), 3), round(np.std(t[0]), 3), round(np.mean(t[1]), 3), round(np.std(t[0]), 3)] for t in results]
    print(results)
    print(trials_averaged)

    latex = r"""\begin{center}
            \begin{tabular}{l|ccccccc|c} 
            \hline & LR & ANOVA & HierLasso & RuleFit & AG & NTD, MLP & NID, MLP-M & kNN (Ours)  \\
            \hline$F_{1}(\mathbf{x})$ & """ + str(trials_averaged[0][0]) + r""" & 0.992 & 1.00 & 0.754 & $1 \pm 0.0$ & $0.970 \pm 9.2 \mathrm{e}-3$ & $0.995 \pm 4.4 \mathrm{e}-3$ & $ """ + str(trials_averaged[0][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[0][3]) + r"""$ \\ 
            $F_{2}(\mathbf{x})$ & """ + str(trials_averaged[1][0]) + r""" & 0.468 & 0.636 & 0.698 & $0.88 \pm 1.4 \mathrm{e}-2$ & $0.79 \pm 3.1 \mathrm{e}-2$ & $0.85 \pm 3.9 \mathrm{e}-2$ & $ """ + str(trials_averaged[1][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[1][3]) + r"""$ \\ 
            $F_{3}(\mathrm{x})$ & """ + str(trials_averaged[2][0]) + r"""  & 0.657 & 0.556 & 0.815 & $1 \pm 0.0$ & $0.999 \pm 2.0 \mathrm{e}-3$ & $1 \pm 0.0$ & $ """ + str(trials_averaged[2][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[2][3]) + r"""$ \\
            $F_{4}(\mathrm{x})$ & """ + str(trials_averaged[3][0]) + r"""  & 0.563 & 0.634 & 0.689 & $0.999 \pm 1.4 \mathrm{e}-3$ & $0.85 \pm 6.7 \mathrm{e}-2$ & $0.996 \pm 4.7 \mathrm{e}-3$ & $ """ + str(trials_averaged[3][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[3][3]) + r"""$ \\ 
            $F_{5}(\mathrm{x})$ & """ + str(trials_averaged[4][0]) + r"""  & 0.544 & 0.625 & 0.797 & $0.67 \pm 5.7 \mathrm{e}-2$ & $1 \pm 0.0$ & $1 \pm 0.0$ & $ """ + str(trials_averaged[4][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[4][3]) + r"""$ \\
            $F_{6}(\mathrm{x})$ & """ + str(trials_averaged[5][0]) + r"""  & 0.780 & 0.730 & 0.811 & $0.64 \pm 1.4 \mathrm{e}-2$ & $0.98 \pm 6.7 \mathrm{e}-2$ & $0.70 \pm 4.8 \mathrm{e}-2$ & $ """ + str(trials_averaged[5][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[5][3]) + r"""$ \\
            $F_{7}(\mathrm{x})$ & """ + str(trials_averaged[6][0]) + r"""  & 0.726 & 0.571 & 0.666 & $0.81 \pm 4.9 \mathrm{e}-2$ & $0.84 \pm 1.7 \mathrm{e}-2$ & $0.82 \pm 2.2 \mathrm{e}-2$ & $ """ + str(trials_averaged[6][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[6][3]) + r"""$ \\ 
            $F_{8}(\mathrm{x})$ & """ + str(trials_averaged[7][0]) + r"""  & 0.929 & 0.958 & 0.946 & $0.937 \pm 1.4 \mathrm{e}-3$ & $0.989 \pm 4.4 \mathrm{e}-3$ & $0.989 \pm 4.5 \mathrm{e}-3$ & $ """ + str(trials_averaged[7][2]) +r""" \pm """ + "{:.1e}".format(trials_averaged[7][3]) + r"""$ \\ 
            $F_{9}(\mathrm{x})$ & """ + str(trials_averaged[8][0]) + r"""  & 0.783 & 0.681 & 0.584 & $0.808 \pm 5.7 \mathrm{e}-3$ & $0.83 \pm 5.3 \mathrm{e}-2$ & $0.83 \pm 3.7 \mathrm{e}-2$ & $ """ + str(trials_averaged[8][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[8][3]) + r"""$ \\ 
            $F_{10}(\mathrm{x})$ & """ + str(trials_averaged[9][0]) + r"""  & 0.765 & 0.583 & 0.876 & $1 \pm 0.0$ & $0.995 \pm 9.5 \mathrm{e}-3$ & $0.99 \pm 2.1 \mathrm{e}-2$ & $ """ + str(trials_averaged[9][2]) + r""" \pm """ + "{:.1e}".format(trials_averaged[9][3]) + r"""$ \\
            \hline average & """ + str(round(np.mean([trials_averaged[i][0] for i in range(10)]), 3)) + r""" & 0.721 & 0.698 & 0.764 & $0.87 \pm 1.4 \mathrm{e}-2$ & $\mathbf{0 . 9 2}^{*} \pm 2.3 \mathrm{e}-2$ & $\mathbf{0 . 9 2} \pm 1.8 \mathrm{e}-2$ & $ """ + str(round(np.mean([trials_averaged[i][2] for i in range(10)]), 3)) + r""" \pm """ + "{:.1e}".format(np.mean([trials_averaged[i][3] for i in range(10)])) + r"""$ \\
            \hline
            \end{tabular}
            \end{center}"""

    print(latex)










